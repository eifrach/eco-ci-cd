---
# tasks file for kickstart_iso
- name: Install required dependencies
  become: true
  ansible.builtin.dnf:
    name:
      - rsync
      - mkisofs
      - sshpass
    state: present

- name: Dowload ISO image
  ansible.builtin.get_url:
    url: "{{ kickstart_iso_link }}"
    dest: "{{ kickstart_iso_dest_dir }}"
    force: false
    mode: "0640"

- name: Create mount directory
  ansible.builtin.file:
    state: directory
    recurse: true
    path: "{{ kickstart_iso_mount_path }}"

- name: Mount iso to {{ kickstart_iso_mount_path }}
  become: true
  ansible.posix.mount:
    path: "{{ kickstart_iso_mount_path }}"
    src: "{{ kickstart_iso_dest_dir }}/{{ kickstart_iso_link | basename }}"
    fstype: iso9660
    opts: ro
    state: ephemeral

- name: Get suffix for filename
  ansible.builtin.set_fact:
    generated_suffix: lookup('community.general.random_string', upper=false, numbers=false,length=5, special=false)

- name: Set kickstart iso os install path
  ansible.builtin.set_fact:
    kickstart_iso_os_install_path: "{{ kickstart_iso_os_install_path_basename }}-{{ generated_suffix }}"

- name: Create working directory
  ansible.builtin.file:
    state: directory
    recurse: true
    path: "{{ kickstart_iso_os_install_path }}"

- name: Copy installation content to working directory
  become: true
  ansible.posix.synchronize:
    src: "{{ kickstart_iso_mount_path }}/"
    dest: "{{ kickstart_iso_os_install_path }}/"
    copy_links: true
  delegate_to: "{{ inventory_hostname }}"

- name: Collect dvd label
  become: true
  ansible.builtin.command:
    "blkid -s LABEL -o value /dev/loop0"
  register: volume_name
  changed_when: false

- name: Unmount iso from {{ kickstart_iso_mount_path }}
  become: true
  ansible.posix.mount:
    path: "{{ kickstart_iso_mount_path }}"
    src: "{{ kickstart_iso_dest_dir }}/{{ kickstart_iso_link | basename }}"
    fstype: iso9660
    opts: ro
    state: unmounted
  notify: Remove mount directory {{ kickstart_iso_mount_path }}

- name: Set up kickstart file
  become: true
  ansible.builtin.template:
    src: templates/kickstart.j2
    dest: "{{ kickstart_iso_os_install_path }}/ks.cfg"
    mode: "0644"
    owner: root
    group: root

- name: Replace grub timeout to 10 seconds (Legacy)
  become: true
  ansible.builtin.replace:
    path: "{{ kickstart_iso_os_install_path }}/isolinux/isolinux.cfg"
    regexp: 'timeout 600'
    replace: 'timeout 10'

- name: Remove default menu entry (Legacy)
  become: true
  ansible.builtin.lineinfile:
    path: "{{ kickstart_iso_os_install_path }}/isolinux/isolinux.cfg"
    regexp: 'menu default'
    state: absent

- name: Add new entry to boot menu entry (Legacy)
  become: true
  ansible.builtin.blockinfile:
    state: present
    path: "{{ kickstart_iso_os_install_path }}/isolinux/isolinux.cfg"
    insertbefore: 'label check'
    content: |
      label kickstart
        menu label ^Kickstart Installation
        menu default
        kernel vmlinuz

        append initrd=initrd.img inst.stage2=hd:LABEL={{ volume_name.stdout }} inst.ks=hd:LABEL={{ volume_name.stdout }}:/ks.cfg

- name: Replace grub timeout to 10 seconds (UEFI)
  become: true
  ansible.builtin.replace:
    path: "{{ kickstart_iso_os_install_path }}/EFI/BOOT/grub.cfg"
    regexp: 'set timeout=60'
    replace: 'set timeout=10'

- name: Add new entry to boot menu (UEFI)
  become: true
  ansible.builtin.blockinfile:
    state: present
    insertbefore: "menuentry 'Test this media*"
    path: "{{ kickstart_iso_os_install_path }}/EFI/BOOT/grub.cfg"
    content: |
      menuentry 'Kickstart Installation' --class fedora --class gnu-linux --class gnu --class os {
              linuxefi /images/pxeboot/vmlinuz inst.stage2=hd:LABEL={{ volume_name.stdout }} inst.ks=hd:LABEL={{ volume_name.stdout }}:/ks.cfg
              initrdefi /images/pxeboot/initrd.img
      }

- name: Set kickstart iso name
  ansible.builtin.set_fact:
    kickstart_iso_name: "{{ kickstart_iso_basename }}-{{ generated_suffix }}"

- name: Create bootable iso
  become: true
  ansible.builtin.command: |
    mkisofs -untranslated-filenames -volid {{ volume_name.stdout }} -J -joliet-long -rational-rock -translation-table -input-charset
    utf-8 -b isolinux/isolinux.bin -c isolinux/boot.cat -no-emul-boot -boot-load-size 4 -boot-info-table -eltorito-alt-boot -e
    images/efiboot.img -no-emul-boot -o {{ kickstart_iso_dest_dir }}/{{ kickstart_iso_name }} -graft-points {{ kickstart_iso_os_install_path }}
  changed_when: true
  notify: Remove working directory

- name: Ensure destionation directory exists
  become: true
  ansible.builtin.file:
    state: directory
    path: "{{ kickstart_iso_file_desire_location }}"
    mode: "0755"

- name: Move iso file to required directory
  become: true
  ansible.builtin.copy:
    src: "{{ kickstart_iso_dest_dir }}/{{ kickstart_iso_name }}"
    dest: "{{ kickstart_iso_file_desire_location }}/{{ kickstart_iso_name }}"
    force: true
    remote_src: true
    mode: '0644'
  notify:
    - "Remove installation ISO from {{ kickstart_iso_dest_dir }}"
    - "Remove ISO from {{ kickstart_iso_dest_dir }}"

---
- name: Setup NTO gotests
  hosts: bastion
  gather_facts: false
  environment:
    K8S_AUTH_KUBECONFIG: "{{ kubeconfig }}"
  vars:
    artifact_dir: /tmp/artifacts
    gotest_dir: /tmp/gotest
    nto_repo: https://github.com/openshift/cluster-node-tuning-operator
  tasks:
    - name: Ensure required variables are defined
      ansible.builtin.assert:
        that:
          - cluster_name is defined
          - kubeconfig is defined

    - name: Get Cluster version
      kubernetes.core.k8s_info:
        api_version: config.openshift.io/v1
        kind: ClusterVersion
        name: version
      register: api_version

    - name: Set ocp_version
      ansible.builtin.set_fact:
        ocp_version: "{{ api_version.resources[0].status.desired.version.split('.')[:2] | join('.') }}"

    - name: Ensure test directory does not exist
      ansible.builtin.file:
        path: "{{ item }}"
        state: absent
      become: true
      loop:
        - "{{ gotest_dir }}"
        - "{{ artifact_dir }}"

    - name: Ensure artifact directory is present
      ansible.builtin.file:
        mode: "0766"
        path: "{{ artifact_dir }}"
        state: directory
        recurse: true

    - name: Clone NTO repository
      ansible.builtin.git:
        repo: "{{ nto_repo }}"
        dest: "{{ gotest_dir }}"
        version: "release-{{ ocp_version }}"

    - name: Set base RHEL image to rhel9 for 4.19+
      ansible.builtin.set_fact:
        base_rhel_image: rhel9
      when: ocp_version is version('4.19', '>=')

    - name: Set base RHEL image to rhel8 for 4.18-
      ansible.builtin.set_fact:
        base_rhel_image: rhel8
      when: ocp_version is version('4.18', '<=')

    - name: Create Go test script
      ansible.builtin.copy:
        dest: "{{ gotest_dir }}/run_gotests.sh"
        mode: "0777"
        content: |
          #!/bin/bash
          set -e
          export PATH=/home/telcov10n/go/bin:/usr/local/go/bin:$PATH
          export KUBECONFIG="{{ kubeconfig }}"
          export ROLE_WORKER_CNF=worker-cnf
          export PERF_TEST_PROFILE=performance
          export IMAGE_REGISTRY="registry.stage.redhat.io/"
          export CNF_TESTS_IMAGE=openshift4/cnf-tests-{{ base_rhel_image }}:v{{ ocp_version }}
          export BUSY_CPUS_IMAGE=${CNF_TESTS_IMAGE}
          export TEST_FOLDER_PATH='test/e2e/performanceprofile/functests'

          echo "Installing ginkgo and gomega..."
          go install github.com/onsi/ginkgo/v2/ginkgo@latest

          cd {{ gotest_dir }}
          go mod vendor && go mod tidy && make vet

          echo "Running gotests..."
          ginkgo   -v -r  --keep-separate-reports --keep-going  --flake-attempts=2 --junit-report=_report.xml \
          {% if label_filter is defined %}
            --label-filter={{ label_filter }} && !hypershift \
          {% endif %}
            --timeout=24h \
            --output-dir={{ artifact_dir }} \
            --require-suite ${TEST_FOLDER_PATH}/0_config \
                            ${TEST_FOLDER_PATH}/1_performance \
                            ${TEST_FOLDER_PATH}/2_performance_update \
                            ${TEST_FOLDER_PATH}/3_performance_status \
                            ${TEST_FOLDER_PATH}/6_mustgather_testing \
                            ${TEST_FOLDER_PATH}/7_performance_kubelet_node \
                            ${TEST_FOLDER_PATH}/8_performance_workloadhints \
                            ${TEST_FOLDER_PATH}/10_performance_ppc
